# PlaywrightJS Challenge

This repository contains an automated test suite built with Playwright. Follow the instructions below to set up, run tests locally, or trigger them through GitHub Actions.

---

## Prerequisites

Before you begin, ensure that you have the following installed on your machine:

* **Node.js** (version 16 or above)
* **npm** (Node Package Manager)
* A code editor (e.g., Visual Studio Code)
* Basic knowledge of JavaScript or TypeScript

You can verify your Node.js and npm versions by running:

```bash
node -v
npm -v
```

---

## Local Setup

1. **Initialize a New Playwright Project**
   Open your project folder in your terminal (for example, in VS Code’s integrated terminal) and run:

   ```bash
   npm init playwright@latest
   ```

   * When prompted, choose **JavaScript** (or TypeScript if you prefer).
   * Select **End-to-end tests** when asked.
   * Accept any default options as needed.

2. **Install Dependencies**
   Once initialization is complete, install all required packages:

   ```bash
   npm install
   ```

3. **Confirm Folder Structure**
   After installation, you should see a `tests/` directory (or equivalent) with example test files generated by Playwright.

---

## Running Tests Locally

To execute the full suite of Playwright tests on your local machine, use:

```bash
npx playwright test
```

This command will discover and run all tests in the designated test folder.

---

## GitHub Actions (CI/CD)

You don’t need to install or configure Playwright on your local system to run these tests. Instead, leverage the built-in GitHub Actions workflow:

1. **Ensure the Workflow File Is Present**
   The repository includes a workflow YAML file under `.github/workflows/playwright-tests.yml` that has been configured with a `workflow_dispatch` trigger. This allows you to start the pipeline manually via GitHub’s interface.

2. **Trigger the Workflow Manually**

   * Navigate to your repository on GitHub.
   * Click the **Actions** tab.
   * Select the **Playwright JS Challange Tests** workflow from the sidebar.
   * At the top of the workflow page, click **Run workflow**, choose the branch (e.g., `main`), and confirm.

3. **Monitor Execution**
   Once the pipeline starts, you can watch its progress on the Actions page. When it finishes successfully, green checkmarks will appear next to each job.

4. **Retrieve Test Reports**
   After the run completes, the workflow will upload test artifacts (for example, an HTML report). Download the artifact from the pipeline’s summary page to view detailed results.

---

Exapmle of generated report of executed tests:

